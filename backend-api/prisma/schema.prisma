// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           Int      @id @default(autoincrement())
  name              String
  email             String   @unique
  password_hash     String
  phone_number      String?
  profile_picture   String?
  is_active         Boolean  @default(true)
  is_email_verified Boolean  @default(false)
  role              String   @default("USER")
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  // Relations
  organizations Organization[]
  search_logs   Search_Log[]
  payments      Payment[]
  ticket_purchases TicketPurchase[]
  // events relation removed (no matching relation in Event)
  
  @@map("User")
}

model Organization {
  organization_id Int      @id @default(autoincrement())
  user_id         Int
  name            String
  description     String?
  logo_url        String?
  contact_email   String?
  contact_number  String?
  website_url     String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  // Relations
  user   User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  events Event[]

  @@map("Organization")
}

model Event {
  event_id          Int      @id @default(autoincrement())
  organization_id   Int?
  // creator_id removed
  title             String
  description       String?
  category          String?
  venue             String?
  location          String?
  start_time        DateTime
  end_time          DateTime
  capacity          Int?
  cover_image_url   String?
  other_images_url  String?
  video_url         String?

  seat_map          Json?    @db.JsonB
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt
  status            String   @default("ACTIVE")

  // Relations
  organization Organization? @relation(fields: [organization_id], references: [organization_id], onDelete: SetNull)
  payments     Payment[]
  ticket_purchases TicketPurchase[]
  // creator relation removed

  @@map("Event")
}

model Search_Log {
  log_id          Int      @id @default(autoincrement())
  user_id         Int?
  search_query    String
  search_time     DateTime @default(now())
  filters_applied String?

  // Relations
  user User? @relation(fields: [user_id], references: [user_id], onDelete: SetNull)

  @@map("Search_Log")
}

model Payment {
  payment_id      String   @id @default(uuid())
  user_id         Int
  event_id        Int
  amount          Decimal  @db.Decimal
  payment_date    DateTime @default(now())
  status          Status   @default(pending)
  payment_method  String?
  transaction_ref String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  // Relations
  user            User            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  event           Event           @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  ticket_purchases TicketPurchase[]

  @@map("payment")
}

model TicketPurchase {
  ticket_id     String   @id @default(uuid())
  event_id      Int
  user_id       Int
  payment_id    String?  // This should be String (uuid) to match payment table
  seat_id       Int?
  seat_label    String?
  purchase_date DateTime
  price         BigInt
  attended      Boolean  @default(false)
  qr_code       String?

  // Relations
  event   Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  user    User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  payment Payment? @relation(fields: [payment_id], references: [payment_id], onDelete: Cascade)

  @@map("ticket_purchase")
}

enum Status {
  pending
  completed
  failed
  refunded

  @@map("status")
}

model MonthlyAnalytics {
  id             Int      @id @default(autoincrement())
  year           Int
  month          Int
  total_events   Int
  total_attendees Int
  total_revenue  Float
  growth_rate    Float
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  @@unique([year, month], name: "year_month") // Composite key to avoid duplicate entries
  @@map("monthly_analytics")
}

